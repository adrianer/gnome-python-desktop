# -*- python -*-
# encoding: utf-8

import os
import Common

def configure(conf):
    conf.env['ENABLE_GNOMEKEYRING'] = bool(conf.check_pkg(
            'gnome-keyring-1 >= 0.5.0 pygobject-2.0 ',
            destvar='GNOMEKEYRING', mandatory=False))

    if conf.check_pkg('gnome-keyring-1 >= 2.20.1', destvar='GNOMEKEYRING_2_20_1', mandatory=False):
        conf.define('HAVE_KEYRING_2_20_1', 1)
    else:
        conf.undefine('HAVE_KEYRING_2_20_1')

def codegen(bld, module):
    cmd = bld.create_obj('command-output')
    cmd.command = 'pygtk-codegen-2.0'
    cmd.command_is_external = True
    cmd.prio = 5
    cmd.argv = [
        '--py_ssize_t-clean',
        '--load-types', cmd.input_file('gnomekeyring-argtypes.py'),
        '--register', os.path.join(cmd.env['PYGTK_DEFSDIR'], 'pango-types.defs'),
        '--register', os.path.join(cmd.env['PYGTK_DEFSDIR'], 'gdk-types.defs'),
        '--register', os.path.join(cmd.env['PYGTK_DEFSDIR'], 'gtk-types.defs'),
        '--prefix', 'py'+module,
        '--override', cmd.input_file("%s.override" % module),
        cmd.input_file("%s.defs" % module),
        ]
    cmd.stdout = '%s.c' % module
    return cmd


def build(bld):
    
    if bld.env()['ENABLE_GNOMEKEYRING']:
        codegen(bld, 'gnomekeyring')
        pyext = bld.create_obj('cc', 'plugin', 'pyext')
        pyext.source = 'gnomekeyringmodule.c gnomekeyring.c'
        pyext.target = 'gnomekeyring'
        pyext.uselib = 'GNOMEKEYRING'
        pyext.inst_var = 'PYTHONDIR'
        pyext.inst_subdir = 'gtk-2.0'

        defsdir = Common.install_files('DATADIR', os.path.join('pygtk', '2.0', 'defs'),
                                       ['gnomekeyring.defs'])

