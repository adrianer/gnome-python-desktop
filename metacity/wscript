# -*- python -*-
# encoding: utf-8

import os
import Common
import Params

def set_options(opt):
    opt.add_option('--enable-metacity',
                   help=('Enable metacity bindings.'
                         ' WARNING: these bindings are not very well maintained '
                         'and may not work or even compile.'),
                   action="store_true", default=False,
                   dest='enable_metacity')
    
def configure(conf):
    conf.env.append_value('MODULES_AVAILABLE', 'metacity')
    if 'metacity' in conf.env['ENABLE_MODULES'] or Params.g_options.enable_metacity:
        if conf.check_pkg('libmetacity-private >= 2.19.8 pygobject-2.0 ',
                          destvar='METACITY', mandatory=False):
            conf.env.append_value('MODULES_TO_BUILD', 'metacity')

def codegen(bld, module):
    cmd = bld.create_obj('command-output')
    cmd.command = 'pygtk-codegen-2.0'
    cmd.command_is_external = True
    cmd.prio = 5
    cmd.argv = [
        '--py_ssize_t-clean',
        '--register', os.path.join(cmd.env['PYGTK_DEFSDIR'], 'pango-types.defs'),
        '--register', os.path.join(cmd.env['PYGTK_DEFSDIR'], 'gdk-types.defs'),
        '--register', os.path.join(cmd.env['PYGTK_DEFSDIR'], 'gtk-types.defs'),
        '--prefix', 'py'+module,
        '--override', cmd.input_file("%s.override" % module),
        cmd.input_file("%s.defs" % module),
        ]
    cmd.stdout = '%s.c' % module
    return cmd


def build(bld):
    
    if 'metacity' in bld.env()['MODULES_TO_BUILD']:
        codegen(bld, 'metacity')
        pyext = bld.create_pyext()
        pyext.source = 'metacitymodule.c metacity.c'
        pyext.target = 'metacity'
        pyext.uselib = 'METACITY'
        pyext.inst_var = 'PYTHONDIR'
        pyext.inst_dir = 'gtk-2.0'

        defsdir = Common.install_files('DATADIR', os.path.join('pygtk', '2.0', 'defs'),
                                       ['metacity.defs'])

