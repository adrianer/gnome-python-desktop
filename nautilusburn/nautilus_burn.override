%%
headers
#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"
#include <nautilus-burn-drive.h>
#include <nautilus-burn-drive-selection.h>
#include <nautilus-burn-recorder.h>
#include "nb_typebuiltins.h"
#include "nb_drive.h"
#include "nb_track.h"
%%
modulename nautilusburn
%%
import gtk.ComboBox as PyGtkComboBox_Type
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  *_get_type
%%
override nautilus_burn_drive_selection_new noargs
static int
_wrap_nautilus_burn_drive_selection_new(PyGObject *self)
{
    self->obj = (GObject *)nautilus_burn_drive_selection_new ();

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create DriveSelection object.");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

%%
override nautilus_burn_drive_selection_get_drive noargs
static PyObject *
_wrap_nautilus_burn_drive_selection_get_drive (PyGObject *self)
{
	const NautilusBurnDrive *drive;
	drive = nautilus_burn_drive_selection_get_drive ((NautilusBurnDriveSelection*)self->obj);
	if (drive == NULL) {
		Py_INCREF (Py_None);
		return Py_None;
	}
	return nb_drive_new_from_native (drive);
}
%%
override nautilus_burn_recorder_cancel
static PyObject *
_wrap_nautilus_burn_recorder_cancel (PyGObject *self, PyObject *args)
{
	int skip_if_dangerous = TRUE;
	
	if (!PyArg_ParseTuple(args, "|i:Recorder.cancel", &skip_if_dangerous))
		return NULL;
	
	return Py_BuildValue ("i", nautilus_burn_recorder_cancel ((NautilusBurnRecorder *)self->obj, skip_if_dangerous));
}
%%
override nautilus_burn_recorder_write_tracks

static PyObject *
_wrap_nautilus_burn_recorder_write_tracks (PyGObject *self, PyObject *args, PyObject *kwargs)
{
	nb_Drive *drive;
	nb_Track *track;
	PyObject *tracks, *py_flags;
	GList *g_tracks = NULL;
	PyGILState_STATE gstate;
	
	int speed, flags, i, len, ret;

	if (!PyArg_ParseTuple (args, "OOiO", &drive, &tracks, &speed, &py_flags))
		return NULL;
	if (!PyList_Check (tracks))
		return NULL;
	if (pyg_flags_get_value (NAUTILUS_BURN_TYPE_RECORDER_WRITE_FLAGS,
	                         py_flags,
	                         &flags))
		return NULL;
		
	len = PyList_GET_SIZE (tracks);
	for (i = 0; i < len; i++) {
		track = (nb_Track *)PyList_GET_ITEM (tracks, i);
		if (!nb_AudioTrack_Check ((PyObject*)track) && !nb_DataTrack_Check ((PyObject*)track)) {
			PyErr_SetString(PyExc_TypeError, "Elements must be "
			                "nautilusburn.AudioTrack or "
			                "nautilusburn.DataTrack");
			g_list_free (g_tracks);
			return NULL;
		}
		g_tracks = g_list_append (g_tracks, &track->track);
	}
	gstate = PyGILState_Ensure();
	ret = nautilus_burn_recorder_write_tracks ((NautilusBurnRecorder*)self->obj, 
	                                           drive->drive,
	                                           g_tracks,
	                                           speed,
	                                           flags);
	PyGILState_Release(gstate);
	
	g_list_free (g_tracks);
	
	return pyg_enum_from_gtype(NAUTILUS_BURN_TYPE_RECORDER_RESULT, ret);
}

%%
override nautilus_burn_recorder_new noargs
static int
_wrap_nautilus_burn_recorder_new (PyGObject *self)
{
    self->obj = (GObject *)nautilus_burn_recorder_new();

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create Recorder object.");
        return -1;
    }
    pygobject_register_wrapper((PyObject *)self);
    return 0;
}

%%
override nautilus_burn_recorder_blank_disc

static PyObject *
_wrap_nautilus_burn_recorder_blank_disc (PyGObject *self, PyObject *args, PyObject *kwargs)
{
	nb_Drive *drive;
	PyObject *py_blank_type;
	int debug, blank_type, ret;
	if (!PyArg_ParseTuple (args, "OOi", &drive, &py_blank_type, &debug))
		return NULL;
	if (pyg_enum_get_value (NAUTILUS_BURN_TYPE_RECORDER_BLANK_TYPE,
	                        py_blank_type,
	                        &blank_type))
		return NULL;
	ret = nautilus_burn_recorder_blank_disc ((NautilusBurnRecorder*)self->obj,
	                                         drive->drive,
	                                         blank_type,
	                                         debug);
	return pyg_enum_from_gtype(NAUTILUS_BURN_TYPE_RECORDER_RESULT, ret);
}

%%
